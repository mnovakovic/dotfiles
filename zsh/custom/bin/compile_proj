
echo "CUSTOM PROJECT"

function compile_project {
    if [ $# -ne 1 ];
        then echo "The param needs to be architecture name, for example Debug/Darwin-x86."
    else
        PLATFORM_NAME=$(echo $1 | awk -F/ '{print $2}')
        BUILD_TYPE=$(echo $1 | awk -F/ '{print $1}')

        PROJECT_NAME="PICatalog"
        OSMETA_REPO_DIR="$HOME/repos/osmeta"
        IOS_PROJECT_PATH="$OSMETA/demo/osmeta/PlatformIntegration/PICatalog/"
        USER_LIBRARY_DIR="$HOME/Library"
        DERIVED_DATA_DIR="$USER_LIBRARY_DIR/Developer/Xcode/DerivedData"

        XCRUN=~/.xcsdk/bin/xcrun
        if hash xcodebuild 2>/dev/null; then
            XCODEBUILD=xcodebuild
            IOS_OSMETA_BUILD_DIR="$IOS_PROJECT_PATH/build"
        else
            XCODEBUILD=~/.xcsdk/bin/xcbuild
            IOS_OSMETA_BUILD_DIR="$DERIVED_DATA_DIR/$PROJECT_NAME-*"
        fi

        OSMETA_BUILD_TYPE="None"
        OSMETA_PLATFORM_TYPE=""
        OSMETA_ARCHITECTURE=""

        case "$BUILD_TYPE" in
            "Debug")
            OSMETA_BUILD_TYPE="-Debug"
            ;;

            "CompactDebug")
            OSMETA_BUILD_TYPE="-CompactDebug"
            ;;

            "Release")
            OSMETA_BUILD_TYPE=""
            ;;

            "NonCompactRelease")
            OSMETA_BUILD_TYPE="-NonCompactRelease"
            ;;
        esac

        if [[ "$OSMETA_BUILD_TYPE" == "None" ]]; then
            echo "Build type is wrong!"
            return 1
        fi

        case "$PLATFORM_NAME" in
            "Darwin-x86")
            OSMETA_PLATFORM_TYPE="osx"
            OSMETA_ARCHITECTURE="i386"
            ;;

            "WinPhone-arm")
            OSMETA_PLATFORM_TYPE="winphone"
            OSMETA_ARCHITECTURE="armv7"
            ;;

            "WinStore-x86")
            OSMETA_PLATFORM_TYPE="winstore"
            OSMETA_ARCHITECTURE="i386"
            ;;
        esac

        if [[ "$OSMETA_PLATFORM_TYPE" == "" ]]; then
            echo "Platform is wrong!"
            return 1
        fi

        OSMETA_SDK="osmeta-$OSMETA_PLATFORM_TYPE$OSMETA_BUILD_TYPE"
        OSMETA_XCODEBUILD_CONFIGURATION="$BUILD_TYPE"
        OUTPUT_DIRECTORY="$HOME/tmp/EXTRACTED_$(date "+%B_%d_at_%H_%M")"

        cd "$OSMETA_REPO_DIR" && \
        make $1 sdk runtime && osactivatesdk && \
        cd $IOS_PROJECT_PATH && \
        rm -rf $IOS_OSMETA_BUILD_DIR && \
        $XCODEBUILD -sdk $OSMETA_SDK -arch $OSMETA_ARCHITECTURE -configuration $OSMETA_XCODEBUILD_CONFIGURATION -project PICatalog.xcodeproj TOOLCHAINS=com.facebook.osmeta.stable.noasserts && \
        rm -rf ./output/ && mkdir output && \
        $XCRUN -n --sdk $OSMETA_SDK PackageApplication --no-appx $(find $IOS_OSMETA_BUILD_DIR -name PICatalog.app) -o $IOS_PROJECT_PATH\output && \
        cd ~/repos/osmeta && \
        make $1 WinUAPEntry_runtime && \
        cd $IOS_PROJECT_PATH && \
        \cp -Rf $IOS_PROJECT_PATH/output/* ~/repos/osmeta/osmeta/platform/windows/WinUAPEntry/WinUAPEntry/
        #\cp -f $IOS_PROJECT_PATH/AppIcon40x40.png $(find $IOS_OSMETA_BUILD_DIR -name PICatalog.app) &&
        cd $IOS_PROJECT_PATH/output/ && \
        $XCRUN -n --sdk $OSMETA_SDK PackageApplication $(find $IOS_OSMETA_BUILD_DIR -name PICatalog.app) -c "$($XCRUN -n -sdk $OSMETA_SDK --show-sdk-path)/$OSMETA_ARCHITECTURE/Support/resources/WinUAPEntry_TemporaryKey.pfx" --dev-installer -o ~/tmp/PICatalog.zip && \
        mkdir "$OUTPUT_DIRECTORY" && \
        unzip -o ~/tmp/PICatalog.zip -d $OUTPUT_DIRECTORY && \
        $HOME/repos/osmeta/osmeta/tools/appx_unpack.py "$OUTPUT_DIRECTORY/App.appx" "$OUTPUT_DIRECTORY/appx_unpacked" && \
        # cat $OUTPUT_DIRECTORY/appx_unpacked/AppxManifest.xml && \
        osr
    fi
}
